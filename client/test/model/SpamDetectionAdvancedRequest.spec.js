/*
 * spamapi
 * Easily and directly scan and block spam security threats in input.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveSpamapiClient);
  }
}(this, function(expect, CloudmersiveSpamapiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpamDetectionAdvancedRequest', function() {
      beforeEach(function() {
        instance = new CloudmersiveSpamapiClient.SpamDetectionAdvancedRequest();
      });

      it('should create an instance of SpamDetectionAdvancedRequest', function() {
        // TODO: update the code to test SpamDetectionAdvancedRequest
        expect(instance).to.be.a(CloudmersiveSpamapiClient.SpamDetectionAdvancedRequest);
      });

      it('should have the property inputString (base name: "InputString")', function() {
        // TODO: update the code to test the property inputString
        expect(instance).to.have.property('inputString');
        // expect(instance.inputString).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "Model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property allowUnsolicitedSales (base name: "AllowUnsolicitedSales")', function() {
        // TODO: update the code to test the property allowUnsolicitedSales
        expect(instance).to.have.property('allowUnsolicitedSales');
        // expect(instance.allowUnsolicitedSales).to.be(expectedValueLiteral);
      });

      it('should have the property allowPromotionalContent (base name: "AllowPromotionalContent")', function() {
        // TODO: update the code to test the property allowPromotionalContent
        expect(instance).to.have.property('allowPromotionalContent');
        // expect(instance.allowPromotionalContent).to.be(expectedValueLiteral);
      });

      it('should have the property allowPhishing (base name: "AllowPhishing")', function() {
        // TODO: update the code to test the property allowPhishing
        expect(instance).to.have.property('allowPhishing');
        // expect(instance.allowPhishing).to.be(expectedValueLiteral);
      });

    });
  });

}));
